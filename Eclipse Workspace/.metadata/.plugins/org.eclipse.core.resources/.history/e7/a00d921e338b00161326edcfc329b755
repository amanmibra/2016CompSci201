import java.util.*;

public class EfficientMarkov implements MarkovInterface<String>{
	//-------------------------------
	private static String PSEUDO_EOS = ""; //this is the variable letter will be set to if there is no EOS after...
										   //the 3-gram
	HashMap<String, ArrayList<String>> markMap = new HashMap<>(); //map to store data for the 3-gram data
	final String alphabet = "abcdefghijklmnopqrstuvwxyz";
	final int N = alphabet.length();
    Random r = new Random();
    private String myText;
	private Random myRandom;
	private int myOrder;
	private static int RANDOM_SEED = 1234;
	//-------------------------------
    
	public EfficientMarkov(int order) {
		myRandom = new Random(RANDOM_SEED);
		myOrder = order;
	}
	
	public EfficientMarkov() {
		this(3);
	}
	
	@Override
	public void setTraining(String text) {
		// TODO Auto-generated method stub
		myText = text; 
	}

	@Override
	public String getRandomText(int length) {
		// TODO Auto-generated method stub
		StringBuilder sb = new StringBuilder();
		int index = myRandom.nextInt(myText.length() - myOrder);

		String current = myText.substring(index, index + myOrder);
		//System.out.printf("first random %d for '%s'\n",index,current);
		sb.append(current);
		for(int k=0; k < length-myOrder; k++){
			ArrayList<String> follows = getFollows(current);
			if (follows.size() == 0){
				break;
			}
			index = myRandom.nextInt(follows.size());
			
			String nextItem = follows.get(index);
			if (nextItem.equals(PSEUDO_EOS)) {
				//System.out.println("PSEUDO");
				break;
			}
			sb.append(nextItem);
			current = current.substring(1)+ nextItem;
		}
		return sb.toString();
	}

	@Override
	public ArrayList<String> getFollows(String key) {
		return markMap.get(key);
	}

	@Override
	public int getOrder() {
		// TODO Auto-generated method stub
		return 0;
	}

}
