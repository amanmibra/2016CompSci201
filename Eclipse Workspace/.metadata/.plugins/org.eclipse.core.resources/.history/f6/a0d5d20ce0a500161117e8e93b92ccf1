
public class LinkStrand implements IDnaStrand{
	
	private class Node {
		String info;
		Node next;
		public Node(String s) {
			info = s;
			next = null;
		}
	}
	private Node myFirst,myLast;
	private long mySize;
	private int myAppends;
	
	public LinkStrand(){
		this("");
	}
	public LinkStrand(String s){
		initialize(s);
	}

	@Override
	public void initialize(String source) {
		myFirst = new Node(source);
		myLast = myFirst;
		mySize = source.length();
		myAppends = 0;
		
	}
	@Override
	public IDnaStrand cutAndSplice(String enzyme, String splicee) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long size() {
		return mySize;
	}

	@Override
	public IDnaStrand getInstance(String source) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IDnaStrand append(String dna) {
		Node tempN = new Node(dna);
		myLast.next = tempN;
		myLast = tempN;
		myAppends++;
		mySize=+ dna.length();
		return this;
	}

	@Override
	public IDnaStrand reverse() {
		
		//Creating Nodes with backward Strings
		Node tempL = myFirst;
		StringBuilder sb = new StringBuilder(tempL.info);
		sb.reverse();
		tempL.info = new String(sb);
		Node tempN = tempL;
		while(tempN != null){
			tempN = tempN.next;
			sb = new StringBuilder(tempN.info);
			sb.reverse();
			tempN.info = new String(sb);
		}
		
		//Reversing the pointers of the Nodes
		Node current = tempL;
		Node prev = null;
		Node Next;
		while(current != null){
			Next = current.next;
			current.next = prev;
			prev = current; 
			current = Next;
		}
		tempL = prev;
		
		//Create a collective String in order to create LinkStrand
		StringBuilder all = new StringBuilder(tempL.info);
		while(tempL != null){
			tempL = tempL.next;
			all.append(tempL.info);
		}
		LinkStrand ls = new LinkStrand(new String(all));
		return ls;
	}

	@Override
	public String getStats() {
		return String.format("# appends = %d", myAppends);
	}

	@Override
	public char charAt(int index) {
		String s = this.toString();
		if(index > s.length())throw new IndexOutOfBoundsException("Index is too large!");  
		return s.charAt(index);
	}
	
	public String toString() {
		Node tempN = myFirst;
		StringBuilder sb = new StringBuilder(tempN.info);
		while(tempN != null){
			tempN = tempN.next;
			sb.append(tempN.info);
		}
		
		return new String(sb);
	}

}
